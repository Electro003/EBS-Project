// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: proto/ebs.proto

package ebs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BrokerService_Publish_FullMethodName                     = "/ebs.BrokerService/Publish"
	BrokerService_RegisterSimpleSubscription_FullMethodName  = "/ebs.BrokerService/RegisterSimpleSubscription"
	BrokerService_RegisterComplexSubscription_FullMethodName = "/ebs.BrokerService/RegisterComplexSubscription"
	BrokerService_ForwardSimpleSubscription_FullMethodName   = "/ebs.BrokerService/ForwardSimpleSubscription"
	BrokerService_ForwardComplexSubscription_FullMethodName  = "/ebs.BrokerService/ForwardComplexSubscription"
	BrokerService_Subscribe_FullMethodName                   = "/ebs.BrokerService/Subscribe"
	BrokerService_NotifyPeerConnection_FullMethodName        = "/ebs.BrokerService/NotifyPeerConnection"
	BrokerService_ForwardNotification_FullMethodName         = "/ebs.BrokerService/ForwardNotification"
	BrokerService_Unsubscribe_FullMethodName                 = "/ebs.BrokerService/Unsubscribe"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	Publish(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterSimpleSubscription(ctx context.Context, in *SimpleSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterComplexSubscription(ctx context.Context, in *ComplexSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ForwardSimpleSubscription(ctx context.Context, in *SimpleSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ForwardComplexSubscription(ctx context.Context, in *ComplexSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscriptionStreamRequest, opts ...grpc.CallOption) (BrokerService_SubscribeClient, error)
	NotifyPeerConnection(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ForwardNotification(ctx context.Context, in *ForwardedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) Publish(ctx context.Context, in *Publication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RegisterSimpleSubscription(ctx context.Context, in *SimpleSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_RegisterSimpleSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RegisterComplexSubscription(ctx context.Context, in *ComplexSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_RegisterComplexSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ForwardSimpleSubscription(ctx context.Context, in *SimpleSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_ForwardSimpleSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ForwardComplexSubscription(ctx context.Context, in *ComplexSubscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_ForwardComplexSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) Subscribe(ctx context.Context, in *SubscriptionStreamRequest, opts ...grpc.CallOption) (BrokerService_SubscribeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[0], BrokerService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &brokerServiceSubscribeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerService_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type brokerServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *brokerServiceSubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerServiceClient) NotifyPeerConnection(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_NotifyPeerConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ForwardNotification(ctx context.Context, in *ForwardedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_ForwardNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrokerService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility
type BrokerServiceServer interface {
	Publish(context.Context, *Publication) (*emptypb.Empty, error)
	RegisterSimpleSubscription(context.Context, *SimpleSubscription) (*emptypb.Empty, error)
	RegisterComplexSubscription(context.Context, *ComplexSubscription) (*emptypb.Empty, error)
	ForwardSimpleSubscription(context.Context, *SimpleSubscription) (*emptypb.Empty, error)
	ForwardComplexSubscription(context.Context, *ComplexSubscription) (*emptypb.Empty, error)
	Subscribe(*SubscriptionStreamRequest, BrokerService_SubscribeServer) error
	NotifyPeerConnection(context.Context, *PeerInfo) (*emptypb.Empty, error)
	ForwardNotification(context.Context, *ForwardedNotification) (*emptypb.Empty, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (UnimplementedBrokerServiceServer) Publish(context.Context, *Publication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBrokerServiceServer) RegisterSimpleSubscription(context.Context, *SimpleSubscription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSimpleSubscription not implemented")
}
func (UnimplementedBrokerServiceServer) RegisterComplexSubscription(context.Context, *ComplexSubscription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterComplexSubscription not implemented")
}
func (UnimplementedBrokerServiceServer) ForwardSimpleSubscription(context.Context, *SimpleSubscription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardSimpleSubscription not implemented")
}
func (UnimplementedBrokerServiceServer) ForwardComplexSubscription(context.Context, *ComplexSubscription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardComplexSubscription not implemented")
}
func (UnimplementedBrokerServiceServer) Subscribe(*SubscriptionStreamRequest, BrokerService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBrokerServiceServer) NotifyPeerConnection(context.Context, *PeerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPeerConnection not implemented")
}
func (UnimplementedBrokerServiceServer) ForwardNotification(context.Context, *ForwardedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardNotification not implemented")
}
func (UnimplementedBrokerServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).Publish(ctx, req.(*Publication))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RegisterSimpleSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RegisterSimpleSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_RegisterSimpleSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RegisterSimpleSubscription(ctx, req.(*SimpleSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RegisterComplexSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplexSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RegisterComplexSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_RegisterComplexSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RegisterComplexSubscription(ctx, req.(*ComplexSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ForwardSimpleSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ForwardSimpleSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ForwardSimpleSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ForwardSimpleSubscription(ctx, req.(*SimpleSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ForwardComplexSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplexSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ForwardComplexSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ForwardComplexSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ForwardComplexSubscription(ctx, req.(*ComplexSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServiceServer).Subscribe(m, &brokerServiceSubscribeServer{ServerStream: stream})
}

type BrokerService_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type brokerServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *brokerServiceSubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _BrokerService_NotifyPeerConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).NotifyPeerConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_NotifyPeerConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).NotifyPeerConnection(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ForwardNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ForwardNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ForwardNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ForwardNotification(ctx, req.(*ForwardedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ebs.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _BrokerService_Publish_Handler,
		},
		{
			MethodName: "RegisterSimpleSubscription",
			Handler:    _BrokerService_RegisterSimpleSubscription_Handler,
		},
		{
			MethodName: "RegisterComplexSubscription",
			Handler:    _BrokerService_RegisterComplexSubscription_Handler,
		},
		{
			MethodName: "ForwardSimpleSubscription",
			Handler:    _BrokerService_ForwardSimpleSubscription_Handler,
		},
		{
			MethodName: "ForwardComplexSubscription",
			Handler:    _BrokerService_ForwardComplexSubscription_Handler,
		},
		{
			MethodName: "NotifyPeerConnection",
			Handler:    _BrokerService_NotifyPeerConnection_Handler,
		},
		{
			MethodName: "ForwardNotification",
			Handler:    _BrokerService_ForwardNotification_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _BrokerService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _BrokerService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ebs.proto",
}
